<tool id="pm_muairss_read" name="Run clustering for optimised structures (pm-muairss read)" version="0.1.0" python_template_version="3.5">
    <requirements>
        <requirement type="package">pymuonsuite</requirement>
    </requirements>
    <command detect_errors="exit_code"><![CDATA[
        unzip $optimisation_results &&
        if test -f "params.yaml"; then echo "params.yaml present"; else echo "params.yaml missing" && exit 64; fi
        && if test -f "input.cell"; then echo "input.cell present"; else echo "input.cell missing" && exit 64; fi
        && out_folder="`python ${__tool_directory__}/get_out_folder.py`" &&
        pm-muairss -t r input.cell params.yaml
    ]]></command>
    <inputs>
        <param type="data" name="optimisation_results" label="optimised muonated structures (.zip)" format="zip" help="A zip folder containing a set of optimised muonated structures, the original structure, and a YAML parameter file. See below for the expected folder structure." />
    </inputs>
    <outputs>
        <data label="Cluster report for $optimisation_results.name" name="cluster_report" format="txt" from_work_dir="$out_folder/*clusters.txt"/>
        <data label="Cluster data for $optimisation_results.name" name="cluster_data" format="txt" from_work_dir="$out_folder/*clusters.dat"/>
    </outputs>
    <tests>
        <test>
            <param name="optimisation_results" value="uep-out.zip" ftype='zip'/>
            <output name="cluster_report" file="clustout-uep.txt" ftype="txt" compare="sim_size" delta="20"/>
            <output name="cluster_data" file="clustout-uep.dat" ftype="txt" compare="sim_size" delta="20"/>
        </test>
        <test>
            <param name="optimisation_results" value="dftb-out.zip" ftype='zip'/>
            <output name="cluster_report" file="clustout-dftb.txt" ftype="txt" compare="sim_size" delta="20"/>
            <output name="cluster_data" file="clustout-dftb.dat" ftype="txt" compare="sim_size" delta="20"/>
        </test>
    </tests>
    <help><![CDATA[
        Given a set of optimised muonated structures, clusters the structures based on similarity.

        If you used the 'Run UEP optimisation' tool for optimisation, the output from that tool can be used as the input to this one.
        If you are bringing files from elsewhere, make sure they fit the expected zip folder structure:

        .. code-block:: RST

            optimised-structures.zip/
            ├─ muon-airss-out/
            │  ├─ uep/
            │  │  ├─ struct_1/
            │  │  │  ├─ <files for optimised struct_1 go here>
            │  │  ├─ struct_2/
            │  │  │  ├─ <files for optimised struct_2 go here>
            │  │  ├─ struct_N/
            │  │  │  ├─ <files for optimised struct_N go here>
            ├─ input.cell
            ├─ params.yaml

        This folder represents a run with the output folder name ``muon-airss-out``, the structure name ``struct``, and the UEP calculator.
        If you use different parameters, these names should match your own settings.

        The zip folder itself has been named ``optimised-structures.zip`` in this example, but it doesn't matter what you call it.

        The files ``input.cell`` and ``params.yaml`` must have those exact names. ``input.cell`` should be your original structure file,
        and ``params.yaml`` is the YAML parameter file used to configure the clustering (as well as any prior muonation and optimisation).
        You should have created this YAML file using the 'Create YAML for pm-muairss' tool or written it yourself, then passed it into the
        'Generate muon structures' tool or pm-muairss.

        Command-line usage: pm-muairss [-h] -t r structures parameter_file
    ]]></help>
    <citations>
        <citation type="bibtex">
@misc{github,
  author = {Muon Spectroscopy Computational Project},
  year = {2021},
  title = {pymuon-suite},
  publisher = {GitHub},
  journal = {GitHub repository},
  url = {https://github.com/muon-spectroscopy-computational-project/pymuon-suite/},
}</citation>
    </citations>
</tool>
